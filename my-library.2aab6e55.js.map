{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-6ac6df6296bd9907.js","src/js/requester-api.js","src/js/render.js","node_modules/@parcel/runtime-js/lib/runtime-4d16f9a35f7e589a.js","src/js/theme-lite-dark.js","src/my-library.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"7OqUs\\\":\\\"my-library.2aab6e55.js\\\",\\\"iHCDC\\\":\\\"noposter.9c466f47.jpg\\\"}\"));","const API_KEY = '1e7c9642f723687d0411097a32c8e17f';\n\nexport function requesterApi(requst = '', numOfPage = 1) {\n    let ref = `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}&page=${numOfPage}&language=en-US`;\n    if (requst) {\n        ref = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${requst}&page=${numOfPage}&language=en-US`\n    };\n    return fetch(ref)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(response.status);\n                }\n                return response.json();\n            })\n            .then(response => {\n                return response;\n            })\n            .catch(error => console.log(error));\n};\n\nexport function requesterApiByID(id) {\n    return fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(response.status);\n                }\n                return response.json();\n            })\n            .then(response => {\n                return response;\n            })\n            .catch(error => console.log(error));\n};\n\nexport function requesterApiGenres() {\n    fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(response.status);\n            }\n            return response.json();\n        })\n        .then(response => {\n            localStorage.setItem(`genresList`, JSON.stringify(response.genres));\n        })\n        .catch(error => console.log(error));\n};","import imgHolder from '../images/noposter.jpg'\n\nexport function renderHomeCards(array) {\n    document.querySelector('.list')\n        .innerHTML = array.reduce((acc, { id, poster_path, title, release_date, genre_ids }) => {\n            poster_path = testPath(poster_path)\n            title = testTile(title)\n            const currentGenres = genresGen(genre_ids);\n            return acc + `<li class=\"item\" id=\"${id}\">\n                            <div class=\"photo__wrapper\">\n                                <a class=\"img__link\" href=\"#\">\n                                    <img class=\"img\" src=\"${poster_path}\" alt=\"\" width=\"395\">\n                                </a>\n                            </div>\n                            <div class=\"data__content\">\n                                <h2 class=\"title\">${title}</h2>\n                                <p class=\"text\">${currentGenres.join(', ')} ${currentGenres[0] && release_date ? '|' : ''} \n                                ${release_date ? `${release_date.slice(0, 4)}` : ''}</p>\n                            </div>\n                        </li>`\n    }, '');\n};\n\nexport function renderLibraryCards(array) {\n    document.querySelector('.list')\n        .innerHTML = array.reduce((acc, { id, poster_path, name, title, vote_average, release_date, genre_ids }) => {\n            poster_path = testPath(poster_path)\n            title = testTile(title)\n            const currentGenres = genresGen(genre_ids);\n            return acc + `<li class=\"item\" id=\"${id}\">\n                            <div class=\"photo__wrapper\">\n                                <a class=\"img__link\" href=\"#\">\n                                    <img class=\"img\" src=\"${poster_path}\" alt=\"\" width=\"395\">\n                                </a>\n                            </div>\n                            <div class=\"data__content\">\n                                <h2 class=\"title\">${name ? name : title}</h2>\n                                <p class=\"text\">${currentGenres.join(', ')} ${currentGenres[0] && release_date ? '|' : ''} \n                                ${release_date ? `${release_date.slice(0, 4)}` : ''} ${vote_average.toFixed(1)}</p>\n                            </div>\n                        </li>`\n    }, '');\n};\n\nexport function renderModal({ id, genres, poster_path, title, original_title, vote_average, vote_count, popularity, overview}) {\n    const currentGenres = [];\n    genres.forEach(elem => currentGenres.push(elem.name));\n    document.querySelector('.list')\n        .innerHTML = `<div id=\"${id}\">\n                        <img class=\"card-img\" src=\"https://image.tmdb.org/t/p/w500/${poster_path}\">\n                        <h2 class=\"card-header\">${title}</h2>\n                        <div class=\"card-stats\">\n                            <p>Vote / Votes</p>\n                            <p>Popularyty</p>\n                            <p>Original Title</p>\n                            <p>Genre</p>\n                        </div>\n                        <div class=\"card-stats-values\">\n                            <p><span>${vote_average.toFixed(1)}</span> / ${vote_count}</p>\n                            <p>${popularity.toFixed(1)}</p>\n                            <p>${original_title}</p>\n                            <p>${currentGenres.join(', ')}</p>\n                        </div>\n                        <p class=\"card-about\">About</p>\n                        <p class=\"card-description\">${overview}</p>\n                        <button class=\"card-watched-btn\">add to watched</button>\n                        <button class=\"card-ueue-btn\">add to queue</button>\n                    </div>`;\n};\n\nexport function renderWatchedOrQueue({ id, genres, poster_path, title, release_date, vote_average}) {\n    const currentGenres = [];\n    JSON.parse(localStorage.getItem(`genresList`))\n        .forEach(ganre => {\n            genres.forEach(elem => {\n                if (ganre.id === elem.id) {\n                    currentGenres.push(elem.name);\n                };\n            });\n        });\n    const data = `<li class=\"item\" id=\"${id}\">\n                    <div class=\"photo__wrapper\">\n                        <a class=\"img__link\" href=\"#\">\n                            <img class=\"img\" src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" alt=\"\" width=\"395\">\n                        </a>\n                    </div>\n                    <div class=\"data__content\">\n                        <h2 class=\"title\">${title}</h2>\n                        <p class=\"text\">${currentGenres.join(', ')} | ${release_date ? release_date.slice(0, 4) : 2022} ${vote_average.toFixed(1)}</p>\n                    </div>\n                </li>`;\n    document.querySelector('.movies-modal').insertAdjacentHTML('beforeend', data);\n};\n\nfunction genresGen(genre_ids) {\n    const currentGenres = [];\n    JSON.parse(localStorage.getItem(`genresList`))\n        .forEach(elem => {\n            if (genre_ids.includes(elem.id) && currentGenres.length < 3) {\n                if (currentGenres.length < 2) {\n                    currentGenres.push(elem.name);\n                } else {\n                    currentGenres.push('Other');\n                };\n            };\n        });\n    return currentGenres;\n};\n\nfunction testTile(title) {\n    if (title.length > 40) {\n        title = title.split(' ')\n        let acc = '';\n        title.forEach(elem => {\n            if ((acc + elem).length <= 40 && !acc.endsWith('...')) {\n                acc = acc + ` ${elem}`;\n            } else if (!acc.endsWith('...')) {\n                acc = acc + '...'\n            };\n        });\n        title = acc;\n    };\n    return title;\n};\n\nfunction testPath(poster_path) {\n    if (!poster_path) {\n        poster_path = imgHolder;\n    } else {\n        poster_path = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n    };\n    return poster_path;\n};","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"iHCDC\")).toString();","const btn = document.querySelector('.btn-theme');\nconst body = document.querySelector('body');\nconst iconLight = document.querySelector('.theme-light');\nconst iconDark = document.querySelector('.theme-night');\n\n\nbtn.addEventListener('click', onClickChangeTheme);\n\nif (localStorage.getItem('theme') === 'dark-theme') {\n  body.classList.add('dark-theme');\n}\n\nif (localStorage.getItem('theme') === 'light-theme') {\n  body.classList.add('light-theme');\n}\n\nfunction onClickChangeTheme(ev) {\n  ev.preventDefault();\n\n  if (body.classList.contains('dark-theme')) {\n    body.classList.remove('dark-theme');\n\n    body.classList.add('light-theme');\n    localStorage.setItem('theme', 'light-theme');\n  } else {\n    body.classList.remove('light-theme');\n\n    body.classList.add('dark-theme');\n    localStorage.setItem('theme', 'dark-theme');\n  }\n}\n","import { watchedMovies, queueMovies } from './js/user-storage.js';\nimport { requesterApi, requesterApiByID, requesterApiGenres } from './js/requester-api.js';\n\nimport { renderHomeCards, renderLibraryCards, renderModal, renderWatchedOrQueue } from './js/render.js';\n\nconst btns = document.querySelectorAll('.header-library__btn')\nconst list = document.querySelector('.list')\nconst imgHolder = document.querySelector('.wrapper-holder')\n\nimport { btn } from './js/theme-lite-dark.js'\n\n\nrequesterApiGenres()\n\nbtns.forEach((elem) => {\n    elem.addEventListener('click', (event) => {\n        if (!elem.classList.contains('header-library__btn--active')) {\n            btns.forEach((elem) => {\n                elem.classList.toggle('header-library__btn--active')\n            });\n        };\n        imgHolder.classList.add('is-hidden');\n        if (event.target.textContent === 'Watched') {\n            list.innerHTML = '';\n            const wMovies = JSON.parse(localStorage.getItem(`watchedMoviesIDs`));\n            if (wMovies) {\n                wMovies.forEach(elem => {\n                    requesterApiByID(elem)\n                        .then(data => {\n                            renderWatchedOrQueue(data);\n                        });\n                });\n            } else {\n                imgHolder.classList.remove('is-hidden');\n            };\n        } else if (event.target.textContent === 'Queue') {\n            list.innerHTML = '';\n            const qMoviesIDs = JSON.parse(localStorage.getItem(`queueMoviesIDs`));\n            imgHolder.classList.add('is-hidden');\n            if (qMoviesIDs) {\n                qMoviesIDs.forEach(elem => {\n                    requesterApiByID(elem)\n                        .then(data => {\n                            renderWatchedOrQueue(data);\n                        });\n                });\n            } else {\n                imgHolder.classList.remove('is-hidden');\n            };\n        };\n    });\n})\n\nlist.innerHTML = '';\nconst wMovies = JSON.parse(localStorage.getItem(`watchedMoviesIDs`));\nimgHolder.classList.add('is-hidden');\nif (wMovies) {\n    wMovies.forEach(elem => {\n        requesterApiByID(elem)\n            .then(data => {\n                renderWatchedOrQueue(data);\n            });\n    });\n} else {\n    imgHolder.classList.remove('is-hidden');\n};\n\n// requesterApi()\n//     .then(data => {\n//         renderLibraryCards(data.results)\n//     })\n\n\n// requesterApiByID(361743)\n//     .then(data => {\n//         renderModal(data)\n//     })\n\n// watchedMovies('put', 755566)"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$11dc707d6e5eb2de$export$39b2cf9496544130","fetch","then","response","ok","status","json","catch","error","console","log","$0e271c871dabf025$export$1473c4fb1f0606e7","genres","poster_path","title","release_date","vote_average","currentGenres","localStorage","getItem","forEach","ganre","elem","push","name","data","join","slice","toFixed","document","querySelector","insertAdjacentHTML","URL","resolve","import","meta","url","toString","$053660c19111dece$var$btn","$053660c19111dece$var$body","addEventListener","ev","preventDefault","classList","contains","remove","add","setItem","$fc8e7c71b3b7ed96$var$btns","querySelectorAll","$fc8e7c71b3b7ed96$var$list","$fc8e7c71b3b7ed96$var$imgHolder","stringify","elem1","event","toggle","target","textContent","innerHTML","wMovies1","qMoviesIDs","$fc8e7c71b3b7ed96$var$wMovies"],"version":3,"file":"my-library.2aab6e55.js.map"}